# Optimized code for lane detection

# Install necessary library
!pip install opencv-python

# Import required libraries
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Read the input image
input_img = cv2.imread('Road.png')

# Convert image to grayscale
gray_img = cv2.cvtColor(input_img, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur
blurred_img = cv2.GaussianBlur(gray_img, (5, 5), 0)

# Detect edges using Canny edge detection
edges_img = cv2.Canny(blurred_img, 50, 150)

# Create a mask to isolate the region of interest
mask = np.zeros_like(edges_img)
height, width = mask.shape
roi_polygon = np.array([[
    (0, height),
    (width, height),
    (width // 2, height // 2)
]])
cv2.fillPoly(mask, roi_polygon, 255)

# Apply the mask to the edges
masked_edges = cv2.bitwise_and(edges_img, mask)

# Detect lines using Hough Transform
detected_lines = cv2.HoughLinesP(masked_edges, rho=6, theta=np.pi/60, threshold=160, lines=np.array([]), minLineLength=40, maxLineGap=25)

# Draw detected lines on a blank image
line_img = np.zeros_like(input_img)
for line in detected_lines:
    x1, y1, x2, y2 = line[0]
    cv2.line(line_img, (x1, y1), (x2, y2), (0, 0, 255), 10)

# Overlay lines on the original image
result_img = cv2.addWeighted(input_img, 0.8, line_img, 1.0, 0.0)

# Display the result
cv2_imshow(result_img)
cv2.waitKey(0)
